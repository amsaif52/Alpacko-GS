const Config = {
  mainSheet: "Orders",
  dbSheet: "Transaction",
};

function doGet() {
  initialSetup();
  return HtmlService.createTemplateFromFile("App").evaluate();
}

function initialSetup() {
  const scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperties({
    skuId: "a",
    etcNum: "b",
    lengthNum: "c",
    breadthNum: "d",
    widthNum: "e",
    fluteNum: "f",
    printNum: "g",
    expectedQty: "h",
    unitPrice: "i",
    sheetWidth: "j",
    sheetLength: "k",
    sheetPerSquare: "l",
    sheetRate: "m",
    sheetCost: "n",
    overHead: "o",
    profit: "p",
    profitPerPercentages: "q",
    printCost: "r",
    shippingCost: "s",
    numSkid: "t",
    boxPerSkid: "u",
    totalCostOHPF: "v",
    vendorPO: "w",
    vendorName: "x",
    vendorsheetArrivalDate: "y",
    customer: "aa",
    customerPO: "ab",
    customerPOQty: "ac",
    deliveryDate: "ad",
    etcConfirmation: "ae",
    totalInventory: "af",
    costPerInventory: "ag",
    recQty: "ah",
    processSheets: "ai",
    printNumber: "aj",
    cutNumber: "ak",
    glueNumber: "al",
    damageNumber: "am",
    damageComments: "an",
    totalNumberBoxes: "ao",
    skidNumber: "ap",
    sheetLocation: "aq",
    paperCost: "ar",
    shippingCost: "as",
    opCost: "at",
    qrCodeUrlColumn: "au",
    updatedAtColumn: "av",
    deliverStatus: "aw",
    palletStatus: "ax",
    shippedStatus: "ay",
  });
}

/**
 * Searches the primary sheet for a row that matches the given URL in the "skuId" column.
 * Returns an array of values from the matching row, including various columns such as vendor information,
 * product dimensions, customer details, and cost information.
 *
 * @param {string} url - The URL to search for in the "skuId" column.
 * @returns {Array} An array of values from the matching row, or an empty array if no match is found.
 */
const searchPrimarySheet = (url) => {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );
  const data = sheet.getDataRange().getValues();
  const columnIndex = columnNumberGetter("skuId") - 1;
  for (let i = 1; i < data.length; i++) {
    if (data[i][columnIndex] === url) {
      return [
        data[i][columnNumberGetter("skuId") - 1],
        data[i][columnNumberGetter("etcNum") - 1],
        data[i][columnNumberGetter("lengthNum") - 1],
        data[i][columnNumberGetter("breadthNum") - 1],
        data[i][columnNumberGetter("widthNum") - 1],
        data[i][columnNumberGetter("fluteNum") - 1],
        data[i][columnNumberGetter("printNum") - 1],
        data[i][columnNumberGetter("expectedQty") - 1], // 7
        data[i][columnNumberGetter("unitPrice") - 1],
        data[i][columnNumberGetter("sheetWidth") - 1],
        data[i][columnNumberGetter("sheetLength") - 1],
        data[i][columnNumberGetter("sheetCost") - 1],
        data[i][columnNumberGetter("numSkid") - 1],
        data[i][columnNumberGetter("boxPerSkid") - 1],
        data[i][columnNumberGetter("totalCostOHPF") - 1],
        data[i][columnNumberGetter("vendorPO") - 1], //15
        data[i][columnNumberGetter("vendorName") - 1],
        data[i][columnNumberGetter("vendorsheetArrivalDate") - 1]
          ? new Date(
              data[i][columnNumberGetter("vendorsheetArrivalDate") - 1]
            ).toLocaleDateString()
          : "N/A",
        data[i][columnNumberGetter("customer") - 1],
        data[i][columnNumberGetter("customerPO") - 1],
        data[i][columnNumberGetter("customerPOQty") - 1],
        data[i][columnNumberGetter("deliveryDate") - 1]
          ? new Date(
              data[i][columnNumberGetter("deliveryDate") - 1]
            ).toLocaleDateString()
          : "N/A", // 21
        data[i][columnNumberGetter("etcConfirmation") - 1], //22
        data[i][columnNumberGetter("totalInventory") - 1], // 23
        data[i][columnNumberGetter("recQty") - 1], // 24
        data[i][columnNumberGetter("processSheets") - 1],
        data[i][columnNumberGetter("printNumber") - 1],
        data[i][columnNumberGetter("cutNumber") - 1],
        data[i][columnNumberGetter("glueNumber") - 1],
        data[i][columnNumberGetter("damageNumber") - 1],
        data[i][columnNumberGetter("damageComments") - 1], //30
        data[i][columnNumberGetter("totalNumberBoxes") - 1],
        data[i][columnNumberGetter("skidNumber") - 1],
        data[i][columnNumberGetter("sheetLocation") - 1],
        data[i][columnNumberGetter("paperCost") - 1],
        data[i][columnNumberGetter("shippingCost") - 1],
        data[i][columnNumberGetter("opCost") - 1],
        data[i][columnNumberGetter("qrCodeUrlColumn") - 1], // 37
        data[i][columnNumberGetter("updatedAtColumn") - 1]
          ? new Date(
              data[i][columnNumberGetter("updatedAtColumn") - 1]
            ).toLocaleDateString()
          : "N/A", // 38
        data[i][columnNumberGetter("deliverStatus") - 1],
      ];
    }
  }
  return [];
};

function columnScriptPropertyGetter(propertyName) {
  const scriptProperties = PropertiesService.getScriptProperties();
  const columnLetter = scriptProperties.getProperty(propertyName);
  return columnLetter;
}

function columnNumberGetter(propertyName) {
  const columnLetter = columnScriptPropertyGetter(propertyName);
  const columnNumber = columnLetterToIndex(columnLetter);
  return columnNumber;
}

function columnLetterToIndex(letter) {
  let column = 0;
  const uppercaseLetter = letter.toUpperCase();
  const length = uppercaseLetter.length;
  for (let i = 0; i < length; i++) {
    column +=
      (uppercaseLetter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);
  }
  return column;
}

function checkDuplicates() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );
  const columnLetter = columnScriptPropertyGetter("skuId");
  const column = sheet
    .getRange(`${columnLetter}2:${columnLetter}${sheet.getLastRow()}`)
    .getValues();
  const duplicates = new Map();
  const spacesFound = new Map();
  const uniqueValues = new Map();

  column.forEach((cell, i) => {
    const value = cell[0].replace(/\s/g, "");
    const rowIndex = i + 2;
    if (value === "") return;

    if (value.includes(" ")) {
      if (spacesFound.has(value)) {
        spacesFound.get(value).push(rowIndex);
      } else {
        spacesFound.set(value, [rowIndex]);
      }
    }

    if (uniqueValues.has(value)) {
      if (duplicates.has(value)) {
        duplicates.get(value).push(rowIndex);
      } else {
        duplicates.set(value, [uniqueValues.get(value), rowIndex]);
      }
    } else {
      uniqueValues.set(value, rowIndex);
    }
  });

  let alertMessage = "";

  if (spacesFound.size > 0) {
    let spacesMessage = "Spaces not allowed. Spaces found:\n";
    spacesFound.forEach((rows, value) => {
      spacesMessage += `${value} - rows: ${rows.join(", ")}\n`;
    });
    alertMessage += spacesMessage + "\n";
  }

  if (duplicates.size > 0) {
    let duplicatesMessage = "Duplicates found:\n";
    duplicates.forEach((rows, value) => {
      duplicatesMessage += `${value} - rows: ${rows.join(", ")}\n`;
    });
    alertMessage += duplicatesMessage;
  }

  if (spacesFound.size > 0 || duplicates.size > 0) {
    SpreadsheetApp.getUi().alert(alertMessage);
    return true;
  }

  return false;
}

function generateQRCode(data) {
  const url =
    "https://quickchart.io/chart?cht=qr&chs=150x150&chl=" +
    encodeURIComponent(data);
  return url;
}

const generateUUID = () => {
  let d = new Date().getTime();
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    let r = Math.random() * 16;
    r = (d + r) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
};

function createQrCodes() {
  if (checkDuplicates()) {
    return;
  }

  if (!areAllPropertiesFilled()) {
    SpreadsheetApp.getUi().alert(
      "Operation halted due to incomplete configuration."
    );
    return;
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );
  const lastRow = sheet.getLastRow();
  const idValues = sheet
    .getRange(2, columnNumberGetter("skuId"), lastRow - 1)
    .getValues();
  const qrCodeUrlValues = sheet
    .getRange(2, columnNumberGetter("qrCodeUrlColumn"), lastRow - 1)
    .getValues();
  let dataToWrite = [];

  for (let i = 0; i < lastRow - 1; i++) {
    if (!qrCodeUrlValues[i][0] && idValues[i][0]) {
      const uuid = generateUUID();
      const code = idValues[i][0] || uuid;
      const qrCode = generateQRCode(code);
      const row = i + 1;
      sheet.getRange(row + 1, columnNumberGetter("skuId")).setValue(code);
      sheet
        .getRange(row + 1, columnNumberGetter("qrCodeUrlColumn"))
        .setValue(qrCode);
    }
  }
}

function areAllPropertiesFilled() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const properties = scriptProperties.getProperties();
  const requiredProperties = ["vendorPoColumn", "vendorName", "skuId"];
  const allFilled = requiredProperties.every(
    (prop) => properties[prop] && properties[prop].trim() !== ""
  );
  const ui = SpreadsheetApp.getUi();
  if (allFilled) {
    return true;
  } else {
    return false;
  }
}

function addTransaction(rowData, newValue) {
  const id = rowData[0];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  updateCellValueById(id, newValue);
  return [id, newValue, new Date(updatedAt)?.toLocaleDateString()];
}

function clearSheet(id) {
  updateCellValueByKey(
    id,
    {
      etcConfirmation: "",
      recQty: "",
      processSheets: "",
      cutNumber: "",
      printNumber: "",
      glueNumber: "",
      damageNumber: "",
      skidNumber: "",
      totalNumberBoxes: "",
      damageComments: "",
      sheetLocation: "",
      skidNumber: "",
      paperCost: "",
      shippingCost: "",
      opCost: "",
      updatedAtColumn: "",
      deliverStatus: "",
      palletStatus: "",
      shippedStatus: "",
      deliveryDate: "",
    },
    []
  );
}

function palletTransaction(rowData, newValue) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );
  const id = rowData[0];
  const rowValue = searchPrimarySheet(id);
  const [headers, ...rows] = sheet.getDataRange().getValues();
  Logger.log(rows);
  let palletRow = rows.find((row) => row[0] === id);
  palletRow[40] = newValue?.totalNumberBoxes;
  palletRow[41] = newValue?.skidNumber;
  palletRow[49] = true;
  Logger.log(palletRow);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(id, JSON.stringify(rowValue), JSON.stringify(newValue), updatedAt);
  const db1 = new Database("Pallet");
  db1.createCols(palletRow);
  updateCellValueByKey(id, { ...newValue }, []);
  clearSheet(id);
  return [id, newValue, new Date(updatedAt)?.toLocaleDateString()];
}

/**
 * Updates the cell values in a Google Sheets spreadsheet for a given row identified by the `id`.
 * The function searches for the row with the specified `id` in the "skuId" column and updates
 * various columns with the values provided in the `newValue` object.
 *
 * @param {string} id - The identifier used to find the row to update.
 * @param {Object} newValue - An object containing the new values to set in the row.
 * @param {string} newValue.etcInput - The value to set in the "etcConfirmation" column.
 * @param {string} newValue.recInput - The value to set in the "recQty" column.
 * @param {string} newValue.processSheetsInput - The value to set in the "processSheets" column.
 * @param {boolean} newValue.cutCheckInput - The value to set in the "cutNumber" column (1 if true, 0 if false).
 * @param {boolean} newValue.printCheckInput - The value to set in the "printNumber" column (1 if true, 0 if false).
 * @param {boolean} newValue.glueCheckInput - The value to set in the "glueNumber" column (1 if true, 0 if false).
 * @param {string} newValue.damageInput - The value to set in the "damageNumber" column.
 * @param {string} newValue.skidInput - The value to set in the "skidNumber" column.
 * @param {string} newValue.totalNumberBoxesInput - The value to set in the "totalNumberBoxes" column.
 * @param {string} newValue.damageCommentsInput - The value to set in the "damageComments" column.
 */
function updateCellValueById(id, newValue) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheetByName(Config.mainSheet);
  const lastRow = sheet.getLastRow();
  const columnRange = sheet.getRange(1, columnNumberGetter("skuId"), lastRow);
  const columnValues = columnRange.getValues();
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < columnValues.length; i++) {
    if (columnValues[i][0] === id) {
      const rowToUpdate = i + 1;
      const findEtcConfirmationData = parseFloat(
        data[i][columnNumberGetter("etcNum") - 1] || 0,
        0
      );
      const findSheetCost = parseFloat(
        data[i][columnNumberGetter("sheetCost") - 1] || 0,
        0
      );
      const findPrintingCost =
        parseFloat(data[i][columnNumberGetter("overHead") - 1] || 0, 0) +
        parseFloat(data[i][columnNumberGetter("profit") - 1] || 0, 0) +
        parseFloat(
          (data[i][columnNumberGetter("printCost") - 1] || 0) *
            newValue?.totalNumberBoxesInput,
          0
        );
      sheet
        .getRange(rowToUpdate, columnNumberGetter("etcConfirmation"))
        .setValue(newValue?.etcInput)
        .setBackground(
          findEtcConfirmationData !== newValue?.etcInput ? "#FF0000" : ""
        );
      sheet
        .getRange(rowToUpdate, columnNumberGetter("recQty"))
        .setValue(newValue?.recInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("processSheets"))
        .setValue(newValue?.processSheetsInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("cutNumber"))
        .setValue(newValue?.cutCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("printNumber"))
        .setValue(newValue?.printCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("glueNumber"))
        .setValue(newValue?.glueCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("damageNumber"))
        .setValue(newValue?.damageInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("skidNumber"))
        .setValue(newValue?.skidInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("totalNumberBoxes"))
        .setValue(newValue?.totalNumberBoxesInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("damageComments"))
        .setValue(newValue?.damageCommentsInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("totalInventory"))
        .setValue(newValue?.totalInventoryInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("boxLocation"))
        .setValue(newValue?.boxLocationInput);

      sheet
        .getRange(rowToUpdate, columnNumberGetter("paperCost"))
        .setValue(findSheetCost * newValue?.recInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("shippingCost"))
        .setValue(60 + (newValue?.skidInput - 1) * 20);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("opCost"))
        .setValue(findPrintingCost);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("updatedAtColumn"))
        .setValue(new Date());
      break;
    }
  }
}

function updateCellValueByKey(id, keys, redBckg) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheetByName(Config.mainSheet);
  const lastRow = sheet.getLastRow();
  const columnRange = sheet.getRange(1, columnNumberGetter("skuId"), lastRow);
  const columnValues = columnRange.getValues();
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < columnValues.length; i++) {
    if (columnValues[i][0] === id) {
      const rowToUpdate = i + 1;
      for (let k = 0; k < Object.keys(keys).length; k++) {
        const key = Object.keys(keys)[k];
        Logger.log(key, keys[key]);
        sheet
          .getRange(rowToUpdate, columnNumberGetter(key))
          .setValue(keys[key])
          .setBackground(redBckg.includes(key) ? "FF0000" : "#FFFFFF");
      }
      break;
    }
  }
}

function getOrders() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );

  const [headers, ...rows] = sheet.getDataRange().getValues();
  let sortedHeaders = headers;

  // Convert data to a format suitable for serialization, respecting sortedHeaders
  const finalData = rows
    .map((row) => {
      return sortedHeaders.reduce((obj, header, index) => {
        let value = row[headers.indexOf(header)]; // Use the original headers array to match column data
        // Check for Date objects and convert them to a string
        if (value instanceof Date) {
          value = Utilities.formatDate(
            value,
            Session.getScriptTimeZone(),
            "MM-dd-YYYY"
          );
        }
        // Ensure other types are handled correctly (e.g., numbers, strings, booleans)
        obj[header] = value;
        return obj;
      }, {});
    })
    .filter((val) => {
      const deliveryDate = new Date(val["Arrival Date"]);
      const today = new Date();
      deliveryDate.setHours(0, 0, 0, 0);
      today.setHours(0, 0, 0, 0);
      return deliveryDate >= today;
    })
    .sort((a, b) => {
      return new Date(a["Arrival Date"]) - new Date(b["Arrival Date"]);
    });
  return { finalData };
}

function updateInv(rowData, key, key1, newValue) {
  const id = rowData[2];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  let getDeductedInventory = oldValue[19];
  if (newValue < oldValue[17]) {
    getDeductedInventory += oldValue[17] - newValue;
    updateCellValueByKey(id, { [key1]: getDeductedInventory }, []);
  }
  updateCellValueByKey(id, { [key]: newValue }, []);
  return [getDeductedInventory, newValue];
}

function getFilteredOrders(filterType) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );
  const sheet1 = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Pallet");

  const [headers, ...rows] = sheet.getDataRange().getValues();
  const [_, ...rows1] = sheet1.getDataRange().getValues();
  let sortedHeaders = headers.map((head) => head.replace(/\s/g, "").trim());

  let skus = [];
  const getUniqueData = rows1
    .map((r, i) => {
      if (r[50].toString().toLowerCase() !== "true") {
        skus.push(r[0]);
        return r;
      }
    })
    .filter((x) => x);

  Logger.log(getUniqueData);

  let rowData = [...rows].map((row) => {
    let indice = skus.indexOf(row[0]);
    Logger.log(indice);
    if (indice > -1) {
      return getUniqueData[indice];
    } else {
      return row;
    }
  });

  Logger.log(rowData);
  // Convert data to a format suitable for serialization, respecting sortedHeaders
  const finalData = rowData
    .map((row) => {
      return sortedHeaders.reduce((obj, header, index) => {
        let value =
          row[
            headers.findIndex(
              (head) => head.replace(/\s/g, "").trim() === header
            )
          ];
        // Use the original headers array to match column data
        // Check for Date objects and convert them to a string
        if (value instanceof Date) {
          value = Utilities.formatDate(
            value,
            Session.getScriptTimeZone(),
            "MM-dd-YYYY"
          );
        }
        // Ensure other types are handled correctly (e.g., numbers, strings, booleans)
        obj[header] = value;
        return obj;
      }, {});
    })
    .filter((val) => {
      if (filterType === "orders") {
        return (
          val["DeliverStatus"].toString().toLowerCase() !== "true" &&
          val["ShippedStatus"].toString().toLowerCase() !== "true"
        );
      } else if (filterType === "inventory") {
        return (
          val["TotalInventory"] > 0 &&
          val["ShippedStatus"].toString().toLowerCase() !== "true"
        );
      } else if (filterType === "salePO") {
        const deliveryDate = new Date(val["DeliveryDate"]);
        const today = new Date();
        deliveryDate.setHours(0, 0, 0, 0);
        today.setHours(0, 0, 0, 0);
        return (
          deliveryDate >= today &&
          val["ShippedStatus"].toString().toLowerCase() !== "true"
        );
      }
      return true;
    });
  return { finalData };
}

function updateShippedStatus(rowData, newValue, redBckg) {
  const id = rowData[0];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  updateCellValueByKey(id, { deliverStatus: true, ...newValue }, redBckg);
  return [id, "Shipped", newValue, new Date(updatedAt)?.toLocaleDateString()];
}

function updateInvBySheets(rowData, newValue) {
  const id = rowData[0];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  updateCellValueByKey(id, { ...newValue }, []);
  return [id, "Sheets", newValue, new Date(updatedAt)?.toLocaleDateString()];
}

function updateStatus(rowData, newValue) {
  const id = rowData[0];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  updateCellValueByKey(id, { ...newValue }, []);
  return [id, "Status", newValue, new Date(updatedAt)?.toLocaleDateString()];
}

function updateDamage(rowData, newValue) {
  const id = rowData[0];
  const [_, ...oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(
    id,
    JSON.stringify(oldValue || 0),
    JSON.stringify(newValue),
    updatedAt
  );
  updateCellValueByKey(id, { ...newValue }, []);
  return [id, "Damage", newValue, new Date(updatedAt)?.toLocaleDateString()];
}

function shippedTransaction(suk) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Pallet");
  const db = new Database("Shipped");
  const data = sheet.getDataRange().getValues();
  const columnIndex = columnNumberGetter("skuId") - 1;
  for (let i = 1; i < data.length; i++) {
    if (
      data[i][columnIndex] === suk &&
      data[i][columnNumberGetter("shippedStatus") - 1] !== true
    ) {
      let tempData = data[i];
      tempData[columnNumberGetter("updatedAtColumn") - 1] =
        new Date().toLocaleDateString();
      Logger.log(tempData);
      db.createCols(tempData);
    }
  }
  const db1 = new Database("Pallet");
  Logger.log(columnNumberGetter("shippedStatus") - 1);
  db1.updateById(suk, columnNumberGetter("shippedStatus") - 1, true);
}

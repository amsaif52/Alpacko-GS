const Config = {
  mainSheet: "Orders",
  dbSheet: "Transaction",
};

function doGet() {
  initialSetup();
  return HtmlService.createTemplateFromFile("App").evaluate();
}

function initialSetup() {
  const scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperties({
    vendorPoColumn: "a",
    vendorName: "b",
    qrCodeUrlColumn: "c",
    skuId: "d",
    etcNum: "e",
    lengthNum: "f",
    breadthNum: "g",
    widthNum: "h",
    fluteNum: "i",
    printNum: "j",
    expectedQty: "k",
    arrivalDate: "aa",
    customer: "ab",
    sheetWidth: "ac",
    sheetHeight: "ad",
    customerPo: "ae",
    customerPoQty: "af",
    deliveryDate: "ag",
    etcConfirmation: "ah",
    totalInventory: "ai",
    costPerInventory: "aj",
    recQty: "ak",
    processSheets: "al",
    printNumber: "am",
    cutNumber: "an",
    glueNumber: "ao",
    damageNumber: "ap",
    damageComments: "aq",
    totalNumberBoxes: "ar",
    skidNumber: "as",
    paperCost: "at",
    shippingCost: "au",
    opCost: "av",
    updatedAtColumn: "aw",
  });
}

const searchPrimarySheet = (url) => {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet,
  );
  const data = sheet.getDataRange().getValues();
  const columnIndex = columnNumberGetter("skuId") - 1;
  for (let i = 1; i < data.length; i++) {
    if (data[i][columnIndex] === url) {
      return [
        data[i][columnNumberGetter("vendorPoColumn") - 1],
        data[i][columnNumberGetter("vendorName") - 1],
        data[i][columnNumberGetter("skuId") - 1],
        data[i][columnNumberGetter("etcNum") - 1],
        data[i][columnNumberGetter("lengthNum") - 1],
        data[i][columnNumberGetter("breadthNum") - 1],
        data[i][columnNumberGetter("widthNum") - 1],
        data[i][columnNumberGetter("fluteNum") - 1],
        data[i][columnNumberGetter("printNum") - 1],
        data[i][columnNumberGetter("expectedQty") - 1],
        data[i][columnNumberGetter("arrivalDate") - 1],
        data[i][columnNumberGetter("customer") - 1],
        data[i][columnNumberGetter("sheetWidth") - 1],
        data[i][columnNumberGetter("sheetHeight") - 1],
        data[i][columnNumberGetter("customerPo") - 1],
        data[i][columnNumberGetter("customerPoQty") - 1],
        data[i][columnNumberGetter("deliveryDate") - 1], // 16
        data[i][columnNumberGetter("etcConfirmation") - 1],
        data[i][columnNumberGetter("totalInventory") - 1],
        data[i][columnNumberGetter("costPerInventory") - 1],
        data[i][columnNumberGetter("recQty") - 1],
        data[i][columnNumberGetter("processSheets") - 1],
        data[i][columnNumberGetter("printNumber") - 1],
        data[i][columnNumberGetter("cutNumber") - 1],
        data[i][columnNumberGetter("glueNumber") - 1],
        data[i][columnNumberGetter("damageNumber") - 1],
        data[i][columnNumberGetter("damageComments") - 1],
        data[i][columnNumberGetter("totalNumberBoxes") - 1],
        data[i][columnNumberGetter("skidNumber") - 1],
        data[i][columnNumberGetter("paperCost") - 1],
        data[i][columnNumberGetter("shippingCost") - 1],
        data[i][columnNumberGetter("opCost") - 1],
        data[i][columnNumberGetter("updatedAtColumn") - 1]
          ? new Date(data[i][columnNumberGetter("updatedAtColumn") - 1]).toLocaleDateString()
          : "N/A", // 32
      ];
    }
  }
  return [];
};

function columnScriptPropertyGetter(propertyName) {
  const scriptProperties = PropertiesService.getScriptProperties();
  const columnLetter = scriptProperties.getProperty(propertyName);
  return columnLetter;
}

function columnNumberGetter(propertyName) {
  const columnLetter = columnScriptPropertyGetter(propertyName);
  const columnNumber = columnLetterToIndex(columnLetter);
  return columnNumber;
}

function columnLetterToIndex(letter) {
  let column = 0;
  const uppercaseLetter = letter.toUpperCase();
  const length = uppercaseLetter.length;
  for (let i = 0; i < length; i++) {
    column += (uppercaseLetter.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);
  }
  return column;
}

function checkDuplicates() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet,
  );
  const columnLetter = columnScriptPropertyGetter("skuId");
  const column = sheet
    .getRange(`${columnLetter}2:${columnLetter}${sheet.getLastRow()}`)
    .getValues();
  const duplicates = new Map();
  const spacesFound = new Map();
  const uniqueValues = new Map();

  column.forEach((cell, i) => {
    const value = cell[0];
    const rowIndex = i + 2;
    if (value === "") return;

    if (value.includes(" ")) {
      if (spacesFound.has(value)) {
        spacesFound.get(value).push(rowIndex);
      } else {
        spacesFound.set(value, [rowIndex]);
      }
    }

    if (uniqueValues.has(value)) {
      if (duplicates.has(value)) {
        duplicates.get(value).push(rowIndex);
      } else {
        duplicates.set(value, [uniqueValues.get(value), rowIndex]);
      }
    } else {
      uniqueValues.set(value, rowIndex);
    }
  });

  let alertMessage = "";

  if (spacesFound.size > 0) {
    let spacesMessage = "Spaces not allowed. Spaces found:\n";
    spacesFound.forEach((rows, value) => {
      spacesMessage += `${value} - rows: ${rows.join(", ")}\n`;
    });
    alertMessage += spacesMessage + "\n";
  }

  if (duplicates.size > 0) {
    let duplicatesMessage = "Duplicates found:\n";
    duplicates.forEach((rows, value) => {
      duplicatesMessage += `${value} - rows: ${rows.join(", ")}\n`;
    });
    alertMessage += duplicatesMessage;
  }

  if (spacesFound.size > 0 || duplicates.size > 0) {
    SpreadsheetApp.getUi().alert(alertMessage);
    return true;
  }

  return false;
}

function generateQRCode(data) {
  const url =
    "https://quickchart.io/chart?cht=qr&chs=150x150&chl=" +
    encodeURIComponent(data);
  return url;
}

const generateUUID = () => {
  let d = new Date().getTime();
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    let r = Math.random() * 16;
    r = (d + r) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
};

function createQrCodes() {
  if (checkDuplicates()) {
    return;
  }

  if (!areAllPropertiesFilled()) {
    SpreadsheetApp.getUi().alert(
      "Operation halted due to incomplete configuration.",
    );
    return;
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet,
  );
  const lastRow = sheet.getLastRow();
  const idValues = sheet
    .getRange(2, columnNumberGetter("skuId"), lastRow - 1)
    .getValues();
  const qrCodeUrlValues = sheet
    .getRange(2, columnNumberGetter("qrCodeUrlColumn"), lastRow - 1)
    .getValues();
  let dataToWrite = [];

  for (let i = 0; i < lastRow - 1; i++) {
    if (!qrCodeUrlValues[i][0] && idValues[i][0]) {
      const uuid = generateUUID();
      const code = idValues[i][0] || uuid;
      const qrCode = generateQRCode(code);
      const row = i + 1;
      sheet.getRange(row + 1, columnNumberGetter("skuId")).setValue(code);
      sheet.getRange(row + 1, columnNumberGetter("qrCodeUrlColumn")).setValue(qrCode);
    }
  }
}

function areAllPropertiesFilled() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const properties = scriptProperties.getProperties();
  const requiredProperties = [
    "vendorPoColumn",
    "vendorName",
    "skuId"
  ];
  const allFilled = requiredProperties.every(
    (prop) => properties[prop] && properties[prop].trim() !== "",
  );
  const ui = SpreadsheetApp.getUi();
  if (allFilled) {
    return true;
  } else {
    return false;
  }
}

function addTransaction(rowData, newValue) {
  const id = rowData[2];
  const [_, oldValue] = searchPrimarySheet(id);
  const db = new Database("Transaction");
  const updatedAt = new Date();
  db.create(id, oldValue || 0, JSON.stringify(newValue), updatedAt);
  updateCellValueById(id, newValue);
  return [id, newValue, new Date(updatedAt)?.toLocaleDateString()];
}

/**
 * Updates the cell values in a Google Sheets spreadsheet for a given row identified by the `id`.
 * The function searches for the row with the specified `id` in the "skuId" column and updates
 * various columns with the values provided in the `newValue` object.
 *
 * @param {string} id - The identifier used to find the row to update.
 * @param {Object} newValue - An object containing the new values to set in the row.
 * @param {string} newValue.etcInput - The value to set in the "etcConfirmation" column.
 * @param {string} newValue.recInput - The value to set in the "recQty" column.
 * @param {string} newValue.processSheetsInput - The value to set in the "processSheets" column.
 * @param {boolean} newValue.cutCheckInput - The value to set in the "cutNumber" column (1 if true, 0 if false).
 * @param {boolean} newValue.printCheckInput - The value to set in the "printNumber" column (1 if true, 0 if false).
 * @param {boolean} newValue.glueCheckInput - The value to set in the "glueNumber" column (1 if true, 0 if false).
 * @param {string} newValue.damageInput - The value to set in the "damageNumber" column.
 * @param {string} newValue.skidInput - The value to set in the "skidNumber" column.
 * @param {string} newValue.totalNumberBoxesInput - The value to set in the "totalNumberBoxes" column.
 * @param {string} newValue.damageCommentsInput - The value to set in the "damageComments" column.
 */
function updateCellValueById(id, newValue) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheetByName(Config.mainSheet);
  const lastRow = sheet.getLastRow();
  const columnRange = sheet.getRange(1, columnNumberGetter("skuId"), lastRow);
  const columnValues = columnRange.getValues();

  for (let i = 1; i < columnValues.length; i++) {
    if (columnValues[i][0] === id) {
      const rowToUpdate = i + 1;
      sheet
        .getRange(rowToUpdate, columnNumberGetter("etcConfirmation"))
        .setValue(newValue?.etcInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("recQty"))
        .setValue(newValue?.recInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("processSheets"))
        .setValue(newValue?.processSheetsInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("cutNumber"))
        .setValue(newValue?.cutCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("printNumber"))
        .setValue(newValue?.printCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("glueNumber"))
        .setValue(newValue?.glueCheckInput ? 1 : 0);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("damageNumber"))
        .setValue(newValue?.damageInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("skidNumber"))
        .setValue(newValue?.skidInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("totalNumberBoxes"))
        .setValue(newValue?.totalNumberBoxesInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("damageComments"))
        .setValue(newValue?.damageCommentsInput);
      sheet
        .getRange(rowToUpdate, columnNumberGetter("updatedAtColumn"))
        .setValue(new Date());
      break;
    }
  }
}

function getOrders() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );

  const [headers, ...rows] = sheet.getDataRange().getValues();
  let sortedHeaders = headers;

  // Convert data to a format suitable for serialization, respecting sortedHeaders
  const finalData = rows
    .map((row) => {
      return sortedHeaders.reduce((obj, header, index) => {
        let value = row[headers.indexOf(header)]; // Use the original headers array to match column data
        // Check for Date objects and convert them to a string
        if (value instanceof Date) {
          value = Utilities.formatDate(
            value,
            Session.getScriptTimeZone(),
            "MM-dd-YYYY"
          );
        }
        // Ensure other types are handled correctly (e.g., numbers, strings, booleans)
        obj[header] = value;
        return obj;
      }, {});
    })
    .filter((val) => {
      const deliveryDate = new Date(val["Arrival Date"]);
      const today = new Date();
      deliveryDate.setHours(0, 0, 0, 0);
      today.setHours(0, 0, 0, 0);
      return deliveryDate >= today;
    })
    .sort((a, b) => {
      return new Date(a["Arrival Date"]) - new Date(b["Arrival Date"]);
    });
  return { finalData };
}

function getInventoryOrders() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
    Config.mainSheet
  );

  const [headers, ...rows] = sheet.getDataRange().getValues();
  let sortedHeaders = headers;

  // Convert data to a format suitable for serialization, respecting sortedHeaders
  const finalData = rows
    .map((row) => {
      return sortedHeaders.reduce((obj, header, index) => {
        let value = row[headers.indexOf(header)];
         // Use the original headers array to match column data
        // Check for Date objects and convert them to a string
        if (value instanceof Date) {
          value = Utilities.formatDate(
            value,
            Session.getScriptTimeZone(),
            "MM-dd-YYYY"
          );
        }
        // Ensure other types are handled correctly (e.g., numbers, strings, booleans)
        obj[header] = value;
        return obj;
      }, {});
    }).filter(val => {
      return val["Total Inventory"] > 0;
    });
  return { finalData };
}